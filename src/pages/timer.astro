---
import Icon from "../components/Icon.astro";
import StopwatchButton from "../components/StopwatchButton.astro";
import Menu from "../components/menu/Menu.astro";
import CenterHero from "../layouts/CenterHero.astro";
import Page from "../layouts/Page.astro";
import TimerInput from "../components/timer/TimerInput.astro";
---

<Page>
  <CenterHero>
    <div>
      <span
        transition:animate="fade"
        transition:name="clock"
        class="countdown font-mono text-4xl sm:text-8xl md:text-9xl"
      >
        <TimerInput classId="input-hours" />
        <span class="value-hours hidden" style="--value:00;"></span>:
        <TimerInput classId="input-minutes" />
        <span class="value-minutes hidden" style="--value:00;"></span>:
        <TimerInput classId="input-seconds" />
        <span class="value-seconds hidden" style="--value:00;"></span>
      </span>
    </div>
    <div class="flex gap-2 mt-4">
      <StopwatchButton label="play" classId="play-btn">
        <Icon icon="play" />
      </StopwatchButton>
      <StopwatchButton label="pause" class="hidden" classId="pause-btn">
        <Icon icon="pause" />
      </StopwatchButton>
      <StopwatchButton disabled label="restart" classId="reset-btn">
        <Icon icon="reload" />
      </StopwatchButton>
      <StopwatchButton disabled label="edit" classId="edit-btn">
        <Icon icon="edit" />
      </StopwatchButton>
    </div>
  </CenterHero>

  <Menu active="timer" />
</Page>

<script>
  import requestAnimationFrames from "request-animation-frames";
  import { r } from "@vyke/results";
  import {
    query,
    select,
    setStyleVar,
    shake,
    enable,
    disable,
    show,
    hide,
  } from "../entities/html";
  import { fromMilliToTime, type TimeValues, zeroPad } from "../entities/time";

  const cssVar = "--value";

  const [
    inputHours,
    valueHours,
    inputMinutes,
    valueMinutes,
    inputSeconds,
    valueSeconds,
    playBtn,
    pauseBtn,
    resetBtn,
    editBtn,
  ] = r.unwrap(
    select(
      query<HTMLInputElement>(".input-hours"),
      query<HTMLElement>(".value-hours"),
      query<HTMLInputElement>(".input-minutes"),
      query<HTMLElement>(".value-minutes"),
      query<HTMLInputElement>(".input-seconds"),
      query<HTMLElement>(".value-seconds"),
      query<HTMLButtonElement>(".play-btn"),
      query<HTMLButtonElement>(".pause-btn"),
      query<HTMLButtonElement>(".reset-btn"),
      query<HTMLButtonElement>(".edit-btn")
    )
  );

  function showInputs() {
    show(inputHours, inputMinutes, inputSeconds);

    hide(valueHours, valueMinutes, valueSeconds);
  }

  function showValues() {
    hide(inputHours, inputMinutes, inputSeconds);

    show(valueHours, valueMinutes, valueSeconds);
  }

  function getValue(input: HTMLInputElement) {
    return Number(input.value);
  }

  function showPauseBtn() {
    hide(playBtn);
    show(pauseBtn);
  }

  function showPlayBtn() {
    show(playBtn);
    hide(pauseBtn);
  }

  function setInputValues(values: TimeValues) {
    inputHours.value = zeroPad(values.hours);
    inputMinutes.value = zeroPad(values.minutes);
    inputSeconds.value = zeroPad(values.seconds);
  }

  playBtn.onclick = () => {
    if (start !== 0) {
      isPaused = false;
      showPauseBtn();
      enable(editBtn);
      enable(resetBtn);
      showValues();
      run();
      return;
    }
    const hours = getValue(inputHours);
    const minutes = getValue(inputMinutes);
    const seconds = getValue(inputSeconds);
    const hoursIsValid = !Number.isNaN(hours);
    const minutesIsValid = !Number.isNaN(minutes);
    const secondsIsValid = !Number.isNaN(seconds);
    if (!hoursIsValid) {
      shake(inputHours);
    }
    if (!minutesIsValid) {
      shake(inputMinutes);
    }
    if (!secondsIsValid) {
      shake(inputSeconds);
    }

    const timeValid = hours > 0 || minutes > 0 || seconds > 0;

    if (!timeValid) {
      shake(inputHours);
      shake(inputMinutes);
      shake(inputSeconds);
    }

    if (timeValid && hoursIsValid && minutesIsValid && secondsIsValid) {
      isPaused = false;
      showValues();
      showPauseBtn();
      enable(editBtn);
      enable(resetBtn);
      setInputValues({
        hours,
        minutes,
        seconds,
        millis: 0,
      });
      start = hours * 3_600_000 + minutes * 60_000 + seconds * 1000;
      run();
    }
  };

  resetBtn.onclick = () => {
    delta = 0;
  };

  pauseBtn.onclick = () => {
    showInputs();
    showPlayBtn();
    disable(resetBtn);
    disable(editBtn);
    setInputValues(fromMilliToTime(start - delta));
    isPaused = true;
  };

  editBtn.onclick = () => {
    isPaused = true;
    delta = 0;
    start = 0;
    showInputs();
    showPlayBtn();
    disable(resetBtn);
    disable(editBtn);
  };

  let start = 0;

  let delta = 0;
  let isPaused = false;

  async function run() {
    let last = Date.now();
    for await (const _timestamp of requestAnimationFrames()) {
      if (isPaused) {
        break;
      }

      const now = Date.now();
      delta += now - last;
      last = now;

      let current = start - delta;

      update(fromMilliToTime(current));

      if (current < 0) {
        isPaused = true;
        // delta = 0;
        current = 0;
        showPlayBtn();
        update(fromMilliToTime(current));
        break;
      }
    }
  }

  function update(values: TimeValues) {
    setStyleVar(valueHours, cssVar, values.hours);
    setStyleVar(valueMinutes, cssVar, values.minutes);
    setStyleVar(valueSeconds, cssVar, values.seconds);
  }
</script>
